using Mutagen.Bethesda;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Binary.Headers;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Skyrim;
using Mutagen.Bethesda.Synthesis;
using Mutagen.Bethesda.WPF.Reflection.Attributes;

namespace Fusion
{
    public class Program
    {
        private static Lazy<Settings> _settings = null!;
        private static Settings Settings => _settings.Value;

        public static async Task<int> Main(string[] args)
        {

            return await SynthesisPipeline.Instance
                .AddPatch<ISkyrimMod, ISkyrimModGetter>(RunPatch)
                .SetTypicalOpen(GameRelease.SkyrimSE, "OverridePatch.esp")
                .SetAutogeneratedSettings(nickname: "Settings", path: "settings.json", out _settings)
                .Run(args);
        }

        public static void RunPatch(IPatcherState<ISkyrimMod, ISkyrimModGetter> state)
        {
            // Get New Settings based on Simple/Advanced
            SettingsUtility NewSettings = new();
            if (Settings.BashTags)
                NewSettings.ProcessBashTags(state, Settings);

            // Process User Tags
            NewSettings.ProcessManualTags(Settings);

            // Begin Record Processing
            Console.WriteLine("Processing Activators");
            ActivatorPatcher.Patch(state, NewSettings.SettingsActivator);

            Console.WriteLine("Processing Armors");
            ArmorPatcher.Patch(state, NewSettings.SettingsArmor);

            Console.WriteLine("Processing Books");
            BookPatcher.Patch(state, NewSettings.SettingsBooks);

            Console.WriteLine("Processing Cells");
            CellPatcher.Patch(state, NewSettings.SettingsCells);

            Console.WriteLine("Processing Containers");
            ContainerPatcher.Patch(state, NewSettings.SettingsContainers);

            Console.WriteLine("Processing Factions");
            FactionPatcher.Patch(state, NewSettings.SettingsFactions);

            Console.WriteLine("Processing Ingestibles");
            WeaponPatcher.Patch(state, NewSettings.SettingsWeapons);

            Console.WriteLine("Processing Leveled Items");
            LeveledItemPatcher.Patch(state, NewSettings.SettingsLeveledItems);

            Console.WriteLine("Processing Leveled NPCs");
            LeveledNPCPatcher.Patch(state, NewSettings.SettingsLeveledNPCs);

            Console.WriteLine("Processing Leveled Spells");
            LeveledSpellPatcher.Patch(state, NewSettings.SettingsLeveledSpells);

            Console.WriteLine("Processing Locations");
            LocationPatcher.Patch(state, NewSettings.SettingsLocations);

            Console.WriteLine("Processing NPCs");
            NPCPatcher.Patch(state, NewSettings.SettingsNPCs);

            Console.WriteLine("Processing Perks");
            PerkPatcher.Patch(state, NewSettings.SettingsPerks);

            Console.WriteLine("Processing Quests");
            QuestPatcher.Patch(state, NewSettings.SettingsQuests);

            Console.WriteLine("Processing Weapons");
            WeaponPatcher.Patch(state, NewSettings.SettingsWeapons);
        }
    }
}
